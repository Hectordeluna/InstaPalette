{"version":3,"sources":["components/AppNavbar.js","components/ColorDisplay.js","components/ErrorCard.js","components/ColorCard.js","services/paletteService.js","components/FormUser.js","components/Footer.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["AppNavbar","props","useState","Box","mb","border","borderBottom","d","justifyContent","alignItems","bg","to","Heading","color","mt","fontWeight","letterSpacing","ColorDisplay","className","width","height","style","backgroundColor","paddingLeft","paddingTop","ErrorCard","w","margin","Icon","textShadow","name","iconName","size","Text","textAlign","fontSize","title","content","ColorCard","borderWidth","rounded","borderColor","p","Image","objectFit","src","profilePhoto","ml","textTransform","posts","palette","length","console","log","Grid","templateColumns","gap","map","getPalette","username","a","axios","get","res","data","FormUser","value","setInput","setName","colors","setPalette","search","setSearch","error","message","setError","onSave","e","preventDefault","useEffect","fetchData","paletteService","result","Container","Row","display","Col","md","sm","Form","onSubmit","position","top","zIndex","InputGroup","children","Input","variant","type","id","placeholder","background","borderRadius","lineHeight","onChange","target","WebkitAppearance","paddingBottom","Spinner","Fade","in","timeout","Footer","App","ThemeProvider","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.91561f40.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n    Collapse,\n    Navbar,\n    NavbarToggler,\n    NavbarBrand,\n    Nav,\n    NavItem,\n    NavLink,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem\n  } from 'reactstrap/';\nimport { Box, Grid, Image, Text, Heading, Divider } from \"@chakra-ui/core\";\nimport { Link } from 'react-router-dom';\n\nconst AppNavbar = (props) => {\n\n    const [isOpen, setIsOpen] = useState(false);\n\n    const toggle = () => setIsOpen(!isOpen);\n\n    return (\n        <div>\n        {/* <Navbar className=\"p-3 mb-5 bg-white rounded\" color=\"light\" light expand=\"md\" style={{ boxShadow: \"0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)\" }}>\n          <NavbarBrand style={{ color: \"#212121\" }} href=\"/\">InstaPalette</NavbarBrand>\n        </Navbar> */}\n        <Box mb=\"30px\" border=\"10px\" borderBottom=\"10px\" d=\"flex\" justifyContent=\"center\" alignItems=\"center\" bg=\"gray.100\">\n         <Link to=\"/\">\n            <Heading \n            color=\"gray.600\" \n            mt=\"50px\" \n            mb=\"50px\" \n            fontWeight=\"bold\"\n            letterSpacing=\"2.8px\"\n            >COLORGRAMER</Heading>\n          </Link>\n        </Box>\n        </div>\n    );\n}\n\nexport default AppNavbar;\n","import React, { useState } from 'react';\nimport {\n    Container,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Row,\n    Col\n  } from 'reactstrap/';\nimport { Box, Grid, Image, Text } from \"@chakra-ui/core\";\n\nconst ColorDisplay = (props) => {\n\n    return (\n        <Box\n        className=\"bg-white rounded\" \n        >\n            <Box width={[props.width * 0.6, props.width * 0.75, props.width]} height={[props.height * 0.6, props.height * 0.75, props.height]} style={{ backgroundColor: props.color }}\n        \n            >\n            </Box>\n            {/* <div style={{ color: \"#4A4A4A\", fontWeight: \"bold\", paddingLeft: \"5px\"}}>\n                Color\n            </div> */}\n            <Box color=\"gray.800\" width={[props.width * 0.6, props.width * 0.75, props.width]} style={{ fontWeight: \"400\", paddingLeft: \"0px\", paddingTop: \"2px\"}}>\n                {props.color}\n            </Box>\n        </Box>\n    );\n}\n\nexport default ColorDisplay;\n","import React, { useState } from 'react';\nimport {\n    Container,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Row,\n    Col\n  } from 'reactstrap/';\nimport { Box, Grid, Image, Text, Icon } from \"@chakra-ui/core\";\n\nconst ErrorCard = (props) => {\n\n    return (\n        <Box d=\"flex\" w={[\"200\",\"400px\",\"475px\"]} className=\"bg-white rounded\">\n            <Box w=\"100%\" style={{ margin: \"75px 20px 75px 20px\" }} justifyContent=\"center\" alignItems=\"center\">\n                <Icon style={{ textShadow: \"1px 1px 1px #ccc\" }} name={props.iconName} size=\"75px\" w=\"100%\" color=\"gray.300\"/>\n                <Text \n                mt=\"10\"\n                color=\"gray.900\" \n                fontWeight=\"bold\"\n                letterSpacing=\"wide\"\n                textAlign=\"center\"\n                fontSize=\"lg\">\n                    {props.title}\n                </Text>\n                <Text \n                style={{ margin: \"0 auto\" }}\n                w=\"200px\"\n                color=\"gray.600\" \n                fontWeight=\"light\"\n                letterSpacing=\"wide\"\n                textAlign=\"center\"\n                fontSize=\"lg\">\n                    {props.content}\n                </Text>\n            </Box>\n        </Box>\n    );\n}\n\nexport default ErrorCard;\n","import React, { useState } from 'react';\nimport {\n    Container,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Row,\n    Col\n  } from 'reactstrap/';\nimport ColorDisplay from \"./ColorDisplay\";\nimport { Box, Grid, Image, Text } from \"@chakra-ui/core\";\nimport ErrorCard from './ErrorCard';\n\n\nconst ColorCard = (props) => {\n\n    const displayCard = () => {\n        if (!props.palette || props.palette.length == 0) {\n            return <ErrorCard iconName=\"lock\" title=\"Oopsie Woopsie!\" content=\"It looks like the user is private or doesn't have any photos.\"/>;\n        }\n        console.log(props.palette);\n        return (\n        <Grid style={{ border: \"0px\" }} templateColumns=\"repeat(3, 10fr)\" gap={2}>\n        {props.palette.map(color => (\n                <Box style={{ border: \"0px\" }}><ColorDisplay color={color} height={150} width={150}/></Box>)\n            )\n        }</Grid>);\n    };\n\n    return (\n        <Box borderWidth=\"1px\" rounded=\"lg\" className=\"bg-white rounded shadow-longer\">\n                <Box bg=\"gray.100\" color=\"gray.600\" borderColor=\"gray.400\" p=\"3\" d=\"flex\" style={{ alignItems: \"center\" }}>\n                    <Image \n                    objectFit=\"cover\"\n                    src={props.profilePhoto} \n                    size={[\"75px\",\"80px\",\"90px\"]}\n                    rounded=\"full\"\n                    className=\"shadow-sharp\"\n                    />\n                    <Box>\n                    <Box\n                    color=\"gray.600\"\n                    fontWeight=\"bold\"\n                    letterSpacing=\"wide\"\n                    ml=\"2\"\n                    fontSize={[\"s\",\"m\",\"lg\"]}\n                    textTransform=\"capitalize\"\n                    >\n                       {props.name}\n                    </Box>\n                    <Box\n                    color=\"gray.400\"\n                    ml=\"2\"\n                    >\n                        {props.posts} posts\n                    </Box>\n                    </Box>\n                </Box>\n                <Box p=\"3\">\n                    {displayCard()}\n                </Box>\n        </Box>\n    );\n}\n\nexport default ColorCard;\n","import axios from 'axios';\n\nexport default {\n  getPalette: async (username) => {\n    let res = await axios.get(`/api/photo/`+username);\n    return res.data || [];\n  }\n}","import React, { useState, useEffect } from 'react';\nimport {\n    Container,\n    Form,\n    FormGroup,\n    Label,\n    Row,\n    Col,\n    ListGroup,\n    ListGroupItem,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Button,\n    Spinner,\n    Fade,\n    Alert\n  } from 'reactstrap/';\nimport ColorCard from \"./ColorCard\";\nimport ErrorCard from \"./ErrorCard\";\nimport Hooks from \"./../services/hooks\";\nimport paletteService from \"./../services/paletteService\";\nimport { Box, Grid, Input, InputGroup, InputLeftElement, Icon } from \"@chakra-ui/core\";\n\nconst FormUser = (props) => {\n\n    const [value, setInput] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [palette, setPalette] = useState({ colors: [], profilePhoto: \"\", posts: 0 });\n    const [search, setSearch] = useState(\"\");\n    const [error, setError] = useState({ error: false, message: \"\" });\n\n    const save = e => {\n        setInput(e.target.value);\n        console.log(value);\n    };\n\n    const onSave = async (e) => {\n        setSearch(true);\n        e.preventDefault();\n    }\n\n    useEffect(() => {\n        const fetchData = async () => {\n            if (value != \"\") {\n                const result = await paletteService.getPalette(value);\n\n                if (result.length == 0) {\n                    setError({error: true, message: \"Make sure the user is public and has photos! uWu\"});\n                } else {\n                    console.log(result);\n                    setPalette(result);\n                }\n\n                setSearch(false);\n            } else {\n                setSearch(false);\n            }\n        };\n\n        if (search) {\n            setPalette([]);\n            setName(value);\n            fetchData();\n        }\n    }, [search]);\n\n    const displayLoading = () => {\n        if (!search) {\n            return null;\n        }\n        return <Spinner color=\"primary\" size=\"lg\"/>;\n    };\n\n    const displayInitial = () => {\n        if (name !== \"\") {\n            return null;\n        }\n\n        return <ErrorCard iconName=\"search\" title=\"Get your Palette!\" content=\"Get your Color Palette with your Instagram username!\" />;\n    }\n\n    return (\n        <div>\n            <Container>\n                <Row style={{display: 'flex', justifyContent: 'center'}}>\n                    <Col md=\"6\" sm=\"12\">\n                        <Form onSubmit={e => onSave(e)} style={{ position: \"relative\", top: \"-50px\", zIndex: \"10\" }}>\n                                <InputGroup>\n                                <InputLeftElement children={<Icon name=\"search\" color=\"gray.300\" />} />\n                                <Input \n                                className=\"shadow-sharp\"\n                                variant=\"flushed\" \n                                type=\"text\" \n                                name=\"username\" \n                                id=\"username\" \n                                placeholder=\"Username...\" \n                                background=\"#FFFFFF\"\n                                borderRadius=\"5px\"\n                                lineHeight=\"1.5\"\n                                border=\"none\"\n                                onChange={e => setInput(e.target.value)}\n                                style={{ WebkitAppearance: \"none\" }}\n                                />\n                                </InputGroup>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row style={{display: 'flex', justifyContent: 'center', paddingBottom: \"30px\"}}>\n                    { displayLoading() }\n                    { displayInitial() }\n                    <Fade in={!search} timeout={700}>\n                        {palette.profilePhoto && (<ColorCard name={name} palette={palette.colors} profilePhoto={palette.profilePhoto} posts={palette.posts}/>)}\n                    </Fade>\n                </Row>            \n            </Container>\n        </div>\n    );\n}\n\nexport default FormUser;\n","import React, { useState } from 'react';\nimport {\n    Container,\n    Form,\n    FormGroup,\n    Label,\n    Input,\n    Row,\n    Col\n  } from 'reactstrap/';\nimport { Box, Grid, Image, Text, Icon, Divider } from \"@chakra-ui/core\";\nimport { Link } from 'react-router-dom';\n\nconst Footer = (props) => {\n\n    return (\n        <Box d=\"flex\" justifyContent=\"center\" alignItems=\"center\" className=\"bg-white rounded\">\n            <Text color=\"gray.400\" letterSpacing=\"1.4px\">\n                COLORGRAMER.HEROKUAPP.COM\n            </Text>\n        </Box>\n    );\n}\n\nexport default Footer;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport AppNavbar from './components/AppNavbar';\nimport FormUser from './components/FormUser';\nimport Footer from './components/Footer';\nimport { ThemeProvider } from '@chakra-ui/core';\nimport customTheme from './theme';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <ThemeProvider>\n          <AppNavbar/>\n          <Switch>\n            <Route path=\"/\" exact component={FormUser}/>\n          </Switch>\n          <Footer/>\n        </ThemeProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";"],"sourceRoot":""}