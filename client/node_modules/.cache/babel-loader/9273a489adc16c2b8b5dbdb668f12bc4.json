{"ast":null,"code":"import _slicedToArray from \"/Users/hectordeluna/development/instaPalette/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nexport default {\n  useFetch(url) {\n    const _useState = useState(null),\n          _useState2 = _slicedToArray(_useState, 2),\n          data = _useState2[0],\n          setDataState = _useState2[1];\n\n    const _useState3 = useState(true),\n          _useState4 = _slicedToArray(_useState3, 2),\n          loading = _useState4[0],\n          setLoadingState = _useState4[1];\n\n    useEffect(() => {\n      setLoadingState(true);\n      fetch(url).then(j => j.json()).then(data => {\n        setDataState(data);\n        setLoadingState(false);\n      });\n    }, [url]);\n    return {\n      data,\n      loading\n    };\n  }\n\n};","map":{"version":3,"sources":["/Users/hectordeluna/development/instaPalette/client/src/services/hooks.js"],"names":["React","useEffect","useState","useFetch","url","data","setDataState","loading","setLoadingState","fetch","then","j","json"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AAEA,eAAe;AACXC,EAAAA,QAAQ,CAACC,GAAD,EAAM;AAAA,sBACmBF,QAAQ,CAAC,IAAD,CAD3B;AAAA;AAAA,UACHG,IADG;AAAA,UACGC,YADH;;AAAA,uBAEyBJ,QAAQ,CAAC,IAAD,CAFjC;AAAA;AAAA,UAEHK,OAFG;AAAA,UAEMC,eAFN;;AAGVP,IAAAA,SAAS,CACL,MAAM;AACNO,MAAAA,eAAe,CAAC,IAAD,CAAf;AACAC,MAAAA,KAAK,CAACL,GAAD,CAAL,CACKM,IADL,CACUC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADf,EAEKF,IAFL,CAEUL,IAAI,IAAI;AACdC,QAAAA,YAAY,CAACD,IAAD,CAAZ;AACAG,QAAAA,eAAe,CAAC,KAAD,CAAf;AACC,OALL;AAMC,KATI,EAUL,CAACJ,GAAD,CAVK,CAAT;AAYA,WAAO;AAAEC,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAAP;AACH;;AAjBU,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport default {\n    useFetch(url) {\n        const [data, setDataState] = useState(null);\n        const [loading, setLoadingState] = useState(true);\n        useEffect(\n            () => {\n            setLoadingState(true);\n            fetch(url)\n                .then(j => j.json())\n                .then(data => {\n                setDataState(data);\n                setLoadingState(false);\n                });\n            },\n            [url]\n        );\n        return { data, loading };\n    }\n}"]},"metadata":{},"sourceType":"module"}